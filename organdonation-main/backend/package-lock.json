const http = require("http");
const fs = require("fs");
const crypto = require("crypto");

// In-memory user storage (replace with a database in production)
const users = {
  donor: [],
  recipient: [],
  hospital: [],
};

const adminCredentials = { email: "spider@gmail.com", password: "1234" };

// Utility function to parse request body
const parseBody = async (req) => {
  return new Promise((resolve, reject) => {
    let body = "";
    req.on("data", (chunk) => (body += chunk.toString()));
    req.on("end", () => resolve(JSON.parse(body)));
    req.on("error", reject);
  });
};

// User signup
const signup = async (req, res, entity) => {
  try {
    const { name, email, password } = await parseBody(req);
    if (!name || !email || !password) {
      res.writeHead(400, { "Content-Type": "application/json" });
      return res.end(JSON.stringify({ message: "All fields are required" }));
    }
    
    if (users[entity].some((user) => user.email === email)) {
      res.writeHead(400, { "Content-Type": "application/json" });
      return res.end(JSON.stringify({ message: "Email already exists" }));
    }
    
    const hashedPassword = crypto.createHash("sha256").update(password).digest("hex");
    users[entity].push({ name, email, password: hashedPassword });
    
    res.writeHead(201, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ message: "Signup successful" }));
  } catch (error) {
    res.writeHead(500, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ message: "Internal server error" }));
  }
};

// User login
const login = async (req, res, entity) => {
  try {
    const { email, password } = await parseBody(req);
    const hashedPassword = crypto.createHash("sha256").update(password).digest("hex");
    
    if (entity === "admin") {
      if (email === adminCredentials.email && password === adminCredentials.password) {
        res.writeHead(200, { "Content-Type": "application/json" });
        return res.end(JSON.stringify({ message: "Admin login successful" }));
      }
      res.writeHead(401, { "Content-Type": "application/json" });
      return res.end(JSON.stringify({ message: "Invalid admin credentials" }));
    }
    
    const user = users[entity].find((u) => u.email === email && u.password === hashedPassword);
    if (!user) {
      res.writeHead(401, { "Content-Type": "application/json" });
      return res.end(JSON.stringify({ message: "Invalid credentials" }));
    }
    
    res.writeHead(200, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ message: "Login successful" }));
  } catch (error) {
    res.writeHead(500, { "Content-Type": "application/json" });
    res.end(JSON.stringify({ message: "Internal server error" }));
  }
};

// Create server
const server = http.createServer((req, res) => {
  if (req.method === "POST") {
    if (req.url === "/signup/donor") return signup(req, res, "donor");
    if (req.url === "/signup/recipient") return signup(req, res, "recipient");
    if (req.url === "/signup/hospital") return signup(req, res, "hospital");
    if (req.url === "/login/donor") return login(req, res, "donor");
    if (req.url === "/login/recipient") return login(req, res, "recipient");
    if (req.url === "/login/hospital") return login(req, res, "hospital");
    if (req.url === "/login/admin") return login(req, res, "admin");
  }
  
  res.writeHead(404, { "Content-Type": "application/json" });
  res.end(JSON.stringify({ message: "Route not found" }));
});

const PORT = 5000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));
